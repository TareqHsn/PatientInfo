// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientInfo_API.Data;

#nullable disable

namespace PatientInfo_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240520085216_Female")]
    partial class Female
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PatientInfo_API.Models.Allergy", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifierDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("PatientInfo_API.Models.Allergy_Detail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AllergieId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifierDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AllergieId");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergies_Details", (string)null);
                });

            modelBuilder.Entity("PatientInfo_API.Models.DiseaseInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifierDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("DiseaseInformations");
                });

            modelBuilder.Entity("PatientInfo_API.Models.NDC", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifierDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("NCDs", (string)null);
                });

            modelBuilder.Entity("PatientInfo_API.Models.NDC_Detail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifierDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Ncdid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NCDId");

                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Ncdid");

                    b.HasIndex("PatientId");

                    b.ToTable("NCD_Details", (string)null);
                });

            modelBuilder.Entity("PatientInfo_API.Models.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DiseaseId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Epliepsy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActve")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifierDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.ToTable("PatientInformations");
                });

            modelBuilder.Entity("PatientInfo_API.Models.Allergy_Detail", b =>
                {
                    b.HasOne("PatientInfo_API.Models.Allergy", "Allergie")
                        .WithMany("AllergiesDetails")
                        .HasForeignKey("AllergieId")
                        .HasConstraintName("FK_Allergies_Details_Allergies");

                    b.HasOne("PatientInfo_API.Models.Patient", "Patient")
                        .WithMany("AllergiesDetails")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Allergies_Details_PatientInformations");

                    b.Navigation("Allergie");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PatientInfo_API.Models.NDC_Detail", b =>
                {
                    b.HasOne("PatientInfo_API.Models.NDC", "Ncd")
                        .WithMany("NcdDetails")
                        .HasForeignKey("Ncdid")
                        .HasConstraintName("FK_NCD_Details_NCDs");

                    b.HasOne("PatientInfo_API.Models.Patient", "Patient")
                        .WithMany("NcdDetails")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_NCD_Details_PatientInformations");

                    b.Navigation("Ncd");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PatientInfo_API.Models.Patient", b =>
                {
                    b.HasOne("PatientInfo_API.Models.DiseaseInfo", "Disease")
                        .WithMany("PatientInformations")
                        .HasForeignKey("DiseaseId")
                        .HasConstraintName("FK_PatientInformations_DiseaseInformations");

                    b.Navigation("Disease");
                });

            modelBuilder.Entity("PatientInfo_API.Models.Allergy", b =>
                {
                    b.Navigation("AllergiesDetails");
                });

            modelBuilder.Entity("PatientInfo_API.Models.DiseaseInfo", b =>
                {
                    b.Navigation("PatientInformations");
                });

            modelBuilder.Entity("PatientInfo_API.Models.NDC", b =>
                {
                    b.Navigation("NcdDetails");
                });

            modelBuilder.Entity("PatientInfo_API.Models.Patient", b =>
                {
                    b.Navigation("AllergiesDetails");

                    b.Navigation("NcdDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
